{"mappings":"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","sources":["public/Assets/MTLLoader.js"],"sourcesContent":["/**\r\n * Loads a Wavefront .mtl file specifying materials\r\n *\r\n * @author angelxuanchang\r\n */\r\n\r\n THREE.MTLLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.MTLLoader.prototype = {\r\n\r\n\tconstructor: THREE.MTLLoader,\r\n\r\n\t/**\r\n\t * Loads and parses a MTL asset from a URL.\r\n\t *\r\n\t * @param {String} url - URL to the MTL file.\r\n\t * @param {Function} [onLoad] - Callback invoked with the loaded object.\r\n\t * @param {Function} [onProgress] - Callback for download progress.\r\n\t * @param {Function} [onError] - Callback for download errors.\r\n\t *\r\n\t * @see setPath setTexturePath\r\n\t *\r\n\t * @note In order for relative texture references to resolve correctly\r\n\t * you must call setPath and/or setTexturePath explicitly prior to load.\r\n\t */\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar loader = new THREE.FileLoader( this.manager );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tonLoad( scope.parse( text ) );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\t/**\r\n\t * Set base path for resolving references.\r\n\t * If set this path will be prepended to each loaded and found reference.\r\n\t *\r\n\t * @see setTexturePath\r\n\t * @param {String} path\r\n\t *\r\n\t * @example\r\n\t *     mtlLoader.setPath( 'assets/obj/' );\r\n\t *     mtlLoader.load( 'my.mtl', ... );\r\n\t */\r\n\tsetPath: function ( path ) {\r\n\r\n\t\tthis.path = path;\r\n\r\n\t},\r\n\r\n\t/**\r\n\t * Set base path for resolving texture references.\r\n\t * If set this path will be prepended found texture reference.\r\n\t * If not set and setPath is, it will be used as texture base path.\r\n\t *\r\n\t * @see setPath\r\n\t * @param {String} path\r\n\t *\r\n\t * @example\r\n\t *     mtlLoader.setPath( 'assets/obj/' );\r\n\t *     mtlLoader.setTexturePath( 'assets/textures/' );\r\n\t *     mtlLoader.load( 'my.mtl', ... );\r\n\t */\r\n\tsetTexturePath: function ( path ) {\r\n\r\n\t\tthis.texturePath = path;\r\n\r\n\t},\r\n\r\n\tsetBaseUrl: function ( path ) {\r\n\r\n\t\tconsole.warn( 'THREE.MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead.' );\r\n\r\n\t\tthis.setTexturePath( path );\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t},\r\n\r\n\tsetMaterialOptions: function ( value ) {\r\n\r\n\t\tthis.materialOptions = value;\r\n\r\n\t},\r\n\r\n\t/**\r\n\t * Parses a MTL file.\r\n\t *\r\n\t * @param {String} text - Content of MTL file\r\n\t * @return {THREE.MTLLoader.MaterialCreator}\r\n\t *\r\n\t * @see setPath setTexturePath\r\n\t *\r\n\t * @note In order for relative texture references to resolve correctly\r\n\t * you must call setPath and/or setTexturePath explicitly prior to parse.\r\n\t */\r\n\tparse: function ( text ) {\r\n\r\n\t\tvar lines = text.split( '\\n' );\r\n\t\tvar info = {};\r\n\t\tvar delimiter_pattern = /\\s+/;\r\n\t\tvar materialsInfo = {};\r\n\r\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\r\n\r\n\t\t\tvar line = lines[ i ];\r\n\t\t\tline = line.trim();\r\n\r\n\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\r\n\r\n\t\t\t\t// Blank line or comment ignore\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar pos = line.indexOf( ' ' );\r\n\r\n\t\t\tvar key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\r\n\t\t\tkey = key.toLowerCase();\r\n\r\n\t\t\tvar value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';\r\n\t\t\tvalue = value.trim();\r\n\r\n\t\t\tif ( key === 'newmtl' ) {\r\n\r\n\t\t\t\t// New material\r\n\r\n\t\t\t\tinfo = { name: value };\r\n\t\t\t\tmaterialsInfo[ value ] = info;\r\n\r\n\t\t\t} else if ( info ) {\r\n\r\n\t\t\t\tif ( key === 'ka' || key === 'kd' || key === 'ks' ) {\r\n\r\n\t\t\t\t\tvar ss = value.split( delimiter_pattern, 3 );\r\n\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tinfo[ key ] = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar materialCreator = new THREE.MTLLoader.MaterialCreator( this.texturePath || this.path, this.materialOptions );\r\n\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\r\n\t\tmaterialCreator.setManager( this.manager );\r\n\t\tmaterialCreator.setMaterials( materialsInfo );\r\n\t\treturn materialCreator;\r\n\r\n\t}\r\n\r\n};\r\n\r\n/**\r\n * Create a new THREE-MTLLoader.MaterialCreator\r\n * @param baseUrl - Url relative to which textures are loaded\r\n * @param options - Set of options on how to construct the materials\r\n *                  side: Which side to apply the material\r\n *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\r\n *                  wrap: What type of wrapping to apply for textures\r\n *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\r\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\r\n *                                Default: false, assumed to be already normalized\r\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\r\n *                                  Default: false\r\n * @constructor\r\n */\r\n\r\nTHREE.MTLLoader.MaterialCreator = function ( baseUrl, options ) {\r\n\r\n\tthis.baseUrl = baseUrl || '';\r\n\tthis.options = options;\r\n\tthis.materialsInfo = {};\r\n\tthis.materials = {};\r\n\tthis.materialsArray = [];\r\n\tthis.nameLookup = {};\r\n\r\n\tthis.side = ( this.options && this.options.side ) ? this.options.side : THREE.FrontSide;\r\n\tthis.wrap = ( this.options && this.options.wrap ) ? this.options.wrap : THREE.RepeatWrapping;\r\n\r\n};\r\n\r\nTHREE.MTLLoader.MaterialCreator.prototype = {\r\n\r\n\tconstructor: THREE.MTLLoader.MaterialCreator,\r\n\r\n\tcrossOrigin: 'Anonymous',\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t},\r\n\r\n\tsetManager: function ( value ) {\r\n\r\n\t\tthis.manager = value;\r\n\r\n\t},\r\n\r\n\tsetMaterials: function ( materialsInfo ) {\r\n\r\n\t\tthis.materialsInfo = this.convert( materialsInfo );\r\n\t\tthis.materials = {};\r\n\t\tthis.materialsArray = [];\r\n\t\tthis.nameLookup = {};\r\n\r\n\t},\r\n\r\n\tconvert: function ( materialsInfo ) {\r\n\r\n\t\tif ( ! this.options ) return materialsInfo;\r\n\r\n\t\tvar converted = {};\r\n\r\n\t\tfor ( var mn in materialsInfo ) {\r\n\r\n\t\t\t// Convert materials info into normalized form based on options\r\n\r\n\t\t\tvar mat = materialsInfo[ mn ];\r\n\r\n\t\t\tvar covmat = {};\r\n\r\n\t\t\tconverted[ mn ] = covmat;\r\n\r\n\t\t\tfor ( var prop in mat ) {\r\n\r\n\t\t\t\tvar save = true;\r\n\t\t\t\tvar value = mat[ prop ];\r\n\t\t\t\tvar lprop = prop.toLowerCase();\r\n\r\n\t\t\t\tswitch ( lprop ) {\r\n\r\n\t\t\t\t\tcase 'kd':\r\n\t\t\t\t\tcase 'ka':\r\n\t\t\t\t\tcase 'ks':\r\n\r\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\r\n\r\n\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\r\n\r\n\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\r\n\r\n\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {\r\n\r\n\t\t\t\t\t\t\t\t// ignore\r\n\r\n\t\t\t\t\t\t\t\tsave = false;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( save ) {\r\n\r\n\t\t\t\t\tcovmat[ lprop ] = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn converted;\r\n\r\n\t},\r\n\r\n\tpreload: function () {\r\n\r\n\t\tfor ( var mn in this.materialsInfo ) {\r\n\r\n\t\t\tthis.create( mn );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetIndex: function ( materialName ) {\r\n\r\n\t\treturn this.nameLookup[ materialName ];\r\n\r\n\t},\r\n\r\n\tgetAsArray: function () {\r\n\r\n\t\tvar index = 0;\r\n\r\n\t\tfor ( var mn in this.materialsInfo ) {\r\n\r\n\t\t\tthis.materialsArray[ index ] = this.create( mn );\r\n\t\t\tthis.nameLookup[ mn ] = index;\r\n\t\t\tindex ++;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.materialsArray;\r\n\r\n\t},\r\n\r\n\tcreate: function ( materialName ) {\r\n\r\n\t\tif ( this.materials[ materialName ] === undefined ) {\r\n\r\n\t\t\tthis.createMaterial_( materialName );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.materials[ materialName ];\r\n\r\n\t},\r\n\r\n\tcreateMaterial_: function ( materialName ) {\r\n\r\n\t\t// Create material\r\n\r\n\t\tvar scope = this;\r\n\t\tvar mat = this.materialsInfo[ materialName ];\r\n\t\tvar params = {\r\n\r\n\t\t\tname: materialName,\r\n\t\t\tside: this.side\r\n\r\n\t\t};\r\n\r\n\t\tfunction resolveURL( baseUrl, url ) {\r\n\r\n\t\t\tif ( typeof url !== 'string' || url === '' )\r\n\t\t\t\treturn '';\r\n\r\n\t\t\t// Absolute URL\r\n\t\t\tif ( /^https?:\\/\\//i.test( url ) ) return url;\r\n\r\n\t\t\treturn baseUrl + url;\r\n\r\n\t\t}\r\n\r\n\t\tfunction setMapForType( mapType, value ) {\r\n\r\n\t\t\tif ( params[ mapType ] ) return; // Keep the first encountered texture\r\n\r\n\t\t\tvar texParams = scope.getTextureParams( value, params );\r\n\t\t\tvar map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );\r\n\r\n\t\t\tmap.repeat.copy( texParams.scale );\r\n\t\t\tmap.offset.copy( texParams.offset );\r\n\r\n\t\t\tmap.wrapS = scope.wrap;\r\n\t\t\tmap.wrapT = scope.wrap;\r\n\r\n\t\t\tparams[ mapType ] = map;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var prop in mat ) {\r\n\r\n\t\t\tvar value = mat[ prop ];\r\n\t\t\tvar n;\r\n\r\n\t\t\tif ( value === '' ) continue;\r\n\r\n\t\t\tswitch ( prop.toLowerCase() ) {\r\n\r\n\t\t\t\t// Ns is material specular exponent\r\n\r\n\t\t\t\tcase 'kd':\r\n\r\n\t\t\t\t\t// Diffuse color (color under white light) using RGB values\r\n\r\n\t\t\t\t\tparams.color = new THREE.Color().fromArray( value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'ks':\r\n\r\n\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\r\n\t\t\t\t\tparams.specular = new THREE.Color().fromArray( value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map_kd':\r\n\r\n\t\t\t\t\t// Diffuse texture map\r\n\r\n\t\t\t\t\tsetMapForType( \"map\", value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map_ks':\r\n\r\n\t\t\t\t\t// Specular map\r\n\r\n\t\t\t\t\tsetMapForType( \"specularMap\", value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'norm':\r\n\r\n\t\t\t\t\tsetMapForType( \"normalMap\", value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map_bump':\r\n\t\t\t\tcase 'bump':\r\n\r\n\t\t\t\t\t// Bump texture map\r\n\r\n\t\t\t\t\tsetMapForType( \"bumpMap\", value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'ns':\r\n\r\n\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\r\n\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\r\n\r\n\t\t\t\t\tparams.shininess = parseFloat( value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'd':\r\n\t\t\t\t\tn = parseFloat(value);\r\n\r\n\t\t\t\t\tif ( n < 1 ) {\r\n\r\n\t\t\t\t\t\tparams.opacity = n;\r\n\t\t\t\t\t\tparams.transparent = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'tr':\r\n\t\t\t\t\tn = parseFloat(value);\r\n\r\n\t\t\t\t\tif ( n > 0 ) {\r\n\r\n\t\t\t\t\t\tparams.opacity = 1 - n;\r\n\t\t\t\t\t\tparams.transparent = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.materials[ materialName ] = new THREE.MeshPhongMaterial( params );\r\n\t\treturn this.materials[ materialName ];\r\n\r\n\t},\r\n\r\n\tgetTextureParams: function ( value, matParams ) {\r\n\r\n\t\tvar texParams = {\r\n\r\n\t\t\tscale: new THREE.Vector2( 1, 1 ),\r\n\t\t\toffset: new THREE.Vector2( 0, 0 )\r\n\r\n\t\t };\r\n\r\n\t\tvar items = value.split( /\\s+/ );\r\n\t\tvar pos;\r\n\r\n\t\tpos = items.indexOf( '-bm' );\r\n\r\n\t\tif ( pos >= 0 ) {\r\n\r\n\t\t\tmatParams.bumpScale = parseFloat( items[ pos + 1 ] );\r\n\t\t\titems.splice( pos, 2 );\r\n\r\n\t\t}\r\n\r\n\t\tpos = items.indexOf( '-s' );\r\n\r\n\t\tif ( pos >= 0 ) {\r\n\r\n\t\t\ttexParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\r\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\r\n\r\n\t\t}\r\n\r\n\t\tpos = items.indexOf( '-o' );\r\n\r\n\t\tif ( pos >= 0 ) {\r\n\r\n\t\t\ttexParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\r\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\r\n\r\n\t\t}\r\n\r\n\t\ttexParams.url = items.join( ' ' ).trim();\r\n\t\treturn texParams;\r\n\r\n\t},\r\n\r\n\tloadTexture: function ( url, mapping, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar texture;\r\n\t\tvar loader = THREE.Loader.Handlers.get( url );\r\n\t\tvar manager = ( this.manager !== undefined ) ? this.manager : THREE.DefaultLoadingManager;\r\n\r\n\t\tif ( loader === null ) {\r\n\r\n\t\t\tloader = new THREE.TextureLoader( manager );\r\n\r\n\t\t}\r\n\r\n\t\tif ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\r\n\t\ttexture = loader.load( url, onLoad, onProgress, onError );\r\n\r\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n};"],"names":[],"version":3,"file":"index.9dae9a10.js.map","sourceRoot":"/__parcel_source_root/"}